[package]
authors     = ["Parity Technologies <admin@parity.io>"]
build       = "build.rs"
default-run = "substrate"
description = "Generic Substrate node implementation in Rust."
edition     = "2018"
homepage    = "https://substrate.dev"
license     = "GPL-3.0-or-later WITH Classpath-exception-2.0"
name        = "node-cli"
repository  = "https://github.com/paritytech/substrate/"
version     = "3.0.0-dev"

[package.metadata.wasm-pack.profile.release]
# `wasm-opt` has some problems on linux, see
# https://github.com/rustwasm/wasm-pack/issues/781 etc.
wasm-opt = false

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[badges]
is-it-maintained-issue-resolution = { repository = "paritytech/substrate" }
is-it-maintained-open-issues      = { repository = "paritytech/substrate" }
maintenance                       = { status = "actively-developed" }
travis-ci                         = { repository = "paritytech/substrate" }

[[bin]]
name              = "substrate"
path              = "bin/main.rs"
required-features = ["cli"]

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
# third-party dependencies
codec       = { package = "parity-scale-codec", version = "2.0.0" }
futures     = "0.3.16"
hex-literal = "0.3.1"
log         = "0.4.8"
rand        = "0.7.2"
serde       = { version = "1.0.126", features = ["derive"] }
structopt   = { version = "0.3.8", optional = true }

# primitives
grandpa-primitives           = { version = "4.0.0-dev", package = "sp-finality-grandpa", path = "../../../primitives/finality-grandpa" }
sp-authority-discovery       = { version = "4.0.0-dev", path = "../../../primitives/authority-discovery" }
sp-authorship                = { version = "4.0.0-dev", path = "../../../primitives/authorship" }
sp-consensus                 = { version = "0.10.0-dev", path = "../../../primitives/consensus/common" }
sp-consensus-babe            = { version = "0.10.0-dev", path = "../../../primitives/consensus/babe" }
sp-core                      = { version = "4.0.0-dev", path = "../../../primitives/core" }
sp-inherents                 = { version = "4.0.0-dev", path = "../../../primitives/inherents" }
sp-keyring                   = { version = "4.0.0-dev", path = "../../../primitives/keyring" }
sp-keystore                  = { version = "0.10.0-dev", path = "../../../primitives/keystore" }
sp-runtime                   = { version = "4.0.0-dev", path = "../../../primitives/runtime" }
sp-timestamp                 = { version = "4.0.0-dev", path = "../../../primitives/timestamp" }
sp-transaction-pool          = { version = "4.0.0-dev", path = "../../../primitives/transaction-pool" }
sp-transaction-storage-proof = { version = "4.0.0-dev", path = "../../../primitives/transaction-storage-proof" }

# client dependencies
grandpa                 = { version = "0.10.0-dev", package = "sc-finality-grandpa", path = "../../../client/finality-grandpa" }
sc-authority-discovery  = { version = "0.10.0-dev", path = "../../../client/authority-discovery" }
sc-basic-authorship     = { version = "0.10.0-dev", path = "../../../client/basic-authorship" }
sc-chain-spec           = { version = "4.0.0-dev", path = "../../../client/chain-spec" }
sc-client-api           = { version = "4.0.0-dev", path = "../../../client/api" }
sc-consensus            = { version = "0.10.0-dev", path = "../../../client/consensus/common" }
sc-consensus-babe       = { version = "0.10.0-dev", path = "../../../client/consensus/babe" }
sc-consensus-slots      = { version = "0.10.0-dev", path = "../../../client/consensus/slots" }
sc-consensus-uncles     = { version = "0.10.0-dev", path = "../../../client/consensus/uncles" }
sc-executor             = { version = "0.10.0-dev", path = "../../../client/executor" }
sc-network              = { version = "0.10.0-dev", path = "../../../client/network" }
sc-rpc                  = { version = "4.0.0-dev", path = "../../../client/rpc" }
sc-service              = { version = "0.10.0-dev", default-features = false, path = "../../../client/service" }
sc-sync-state-rpc       = { version = "0.10.0-dev", path = "../../../client/sync-state-rpc" }
sc-telemetry            = { version = "4.0.0-dev", path = "../../../client/telemetry" }
sc-transaction-pool     = { version = "4.0.0-dev", path = "../../../client/transaction-pool" }
sc-transaction-pool-api = { version = "4.0.0-dev", path = "../../../client/transaction-pool/api" }

# frame dependencies
frame-system               = { version = "4.0.0-dev", path = "../../../frame/system" }
pallet-im-online           = { version = "4.0.0-dev", default-features = false, path = "../../../frame/im-online" }
pallet-transaction-payment = { version = "4.0.0-dev", path = "../../../frame/transaction-payment" }

# node-specific dependencies
node-executor   = { version = "3.0.0-dev", path = "../executor" }
node-primitives = { version = "2.0.0", path = "../primitives" }
node-rpc        = { version = "3.0.0-dev", path = "../rpc" }
node-runtime    = { version = "3.0.0-dev", path = "../runtime" }

# CLI-specific dependencies
frame-benchmarking-cli = { version = "4.0.0-dev", optional = true, path = "../../../utils/frame/benchmarking-cli" }
node-inspect           = { version = "0.9.0-dev", optional = true, path = "../inspect" }
sc-cli                 = { version = "0.10.0-dev", optional = true, path = "../../../client/cli" }
try-runtime-cli        = { version = "0.10.0-dev", optional = true, path = "../../../utils/frame/try-runtime/cli" }

[target.'cfg(target_arch="x86_64")'.dependencies]
node-executor = { version = "3.0.0-dev", path = "../executor", features = ["wasmtime"] }
sc-cli        = { version = "0.10.0-dev", optional = true, path = "../../../client/cli", features = ["wasmtime"] }
sc-service    = { version = "0.10.0-dev", default-features = false, path = "../../../client/service", features = ["wasmtime"] }
sp-trie       = { version = "4.0.0-dev", default-features = false, path = "../../../primitives/trie", features = ["memory-tracker"] }

[dev-dependencies]
assert_cmd          = "1.0"
async-std           = { version = "1.6.5", features = ["attributes"] }
futures             = "0.3.16"
nix                 = "0.19"
platforms           = "1.1"
regex               = "1"
sc-consensus        = { version = "0.10.0-dev", path = "../../../client/consensus/common" }
sc-consensus-babe   = { version = "0.10.0-dev", path = "../../../client/consensus/babe" }
sc-consensus-epochs = { version = "0.10.0-dev", path = "../../../client/consensus/epochs" }
sc-keystore         = { version = "4.0.0-dev", path = "../../../client/keystore" }
sc-service-test     = { version = "2.0.0", path = "../../../client/service/test" }
serde_json          = "1.0"
soketto             = "0.4.2"
tempfile            = "3.1.0"

[build-dependencies]
frame-benchmarking-cli       = { version = "4.0.0-dev", optional = true, path = "../../../utils/frame/benchmarking-cli" }
node-inspect                 = { version = "0.9.0-dev", optional = true, path = "../inspect" }
sc-cli                       = { version = "0.10.0-dev", path = "../../../client/cli", optional = true }
structopt                    = { version = "0.3.8", optional = true }
substrate-build-script-utils = { version = "3.0.0", optional = true, path = "../../../utils/build-script-utils" }
substrate-frame-cli          = { version = "4.0.0-dev", optional = true, path = "../../../utils/frame/frame-utilities-cli" }
try-runtime-cli              = { version = "0.10.0-dev", optional = true, path = "../../../utils/frame/try-runtime/cli" }

[features]
cli = [
	"structopt",
	"node-executor/wasmi-errno",
	"node-inspect",
	"frame-benchmarking-cli",
	"sc-cli",
	"sc-service/db",
	"substrate-frame-cli",
	"substrate-build-script-utils",
	"try-runtime-cli",
]
default = ["cli"]
runtime-benchmarks = [
	"node-runtime/runtime-benchmarks",
	"frame-benchmarking-cli",
]
# Enable features that allow the runtime to be tried and debugged. Name might be subject to change
# in the near future.
try-runtime = ["node-runtime/try-runtime", "try-runtime-cli"]
